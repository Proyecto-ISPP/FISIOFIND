name: Generate Changelog and Tag

on:
  push:
    branches:
      - feat/test-main
      - fix/changelog.yml
jobs:
  generate-changelog:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  

      - name: Get latest tag and calculate new version
        id: get-latest-tag
        run: |
          latest_tag=$(git tag --sort=-v:refname | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' | head -n 1)
          echo "√öltima tag encontrada: $latest_tag"

          if [[ -z "$latest_tag" ]]; then
            major=0
            minor=0
            patch=0
          else
            IFS='.' read -r major minor patch <<< "$latest_tag"
          fi

          log_range="${latest_tag}..HEAD"
          source_branch="${GITHUB_REF#refs/heads/}"

          echo "üîç Rama actual: $source_branch"

          source_branch="${GITHUB_REF#refs/heads/}"

          # Simulaci√≥n de ramas para pruebas
          if [[ "$source_branch" == "main" || "$source_branch" == "feat/test-main" ]]; then
            major=$((major + 1))
            minor=0
            patch=0
            echo "üì¶ Se incrementar√° la versi√≥n MAJOR"
          elif [[ "$source_branch" == "develop" || "$source_branch" == "fix/changelog.yml" ]]; then
            log_range="${latest_tag}..HEAD"

            feature_count=$(git log --grep="^feat:" --oneline $log_range | wc -l)

            if (( feature_count > 0 )); then
              minor=$((minor + 1))
              patch=0
              echo "üöÄ Se incrementar√° la versi√≥n MINOR por commits feat:"
            else
              patch=$((patch + 1))
              echo "üõ†Ô∏è Se incrementar√° la versi√≥n PATCH por otros cambios"
            fi



          new_tag="${major}.${minor}.${patch}"
          echo "NEW_TAG=$new_tag" >> $GITHUB_ENV
          echo "latest_tag=$latest_tag" >> $GITHUB_ENV
          echo "üîñ Nueva tag a crear: $new_tag"


      - name: Check if tag exists and create new tag
        run: |
          # Verificar si la nueva tag ya existe
          if git rev-parse "refs/tags/$NEW_TAG" >/dev/null 2>&1; then
            echo "La tag $NEW_TAG ya existe. Buscando la siguiente versi√≥n disponible..."
            
            # Si ya existe, incrementamos el patch hasta encontrar una tag no existente
            while git rev-parse "refs/tags/${major}.${minor}.$((patch+1))" >/dev/null 2>&1; do
              patch=$((patch+1))
            done

            NEW_TAG="${major}.${minor}.${patch}"
            echo "Nueva tag disponible: $NEW_TAG"
          fi

      - name: Generate changelog
        id: generate-changelog
        run: |
          latest_tag=$(git tag --sort=-v:refname | head -n 1)

          echo "## üöÄ Changelog - $NEW_TAG" > CHANGELOG.md
          echo "" >> CHANGELOG.md

          # Contar commits por categor√≠a
          features_count=$(git log --grep="^[Ff]eat:" --oneline "$latest_tag"..HEAD | wc -l)
          fixes_count=$(git log --grep="^[Ff]ix:" --oneline "$latest_tag"..HEAD | wc -l)
          docs_count=$(git log --grep="^[Dd]ocs:" --oneline "$latest_tag"..HEAD | wc -l)
          others_count=$(git log --oneline "$latest_tag"..HEAD --invert-grep --grep="^[Ff]eat:" --grep="^[Ff]ix:" --grep="^[Dd]ocs:" | wc -l)

          echo "### ‚ú® Features ($features_count)" >> CHANGELOG.md
          git log --pretty=format:"- %s (@%an)" --grep="^[Ff]eat:" "$latest_tag"..HEAD >> CHANGELOG.md
          echo "" >> CHANGELOG.md

          echo "### üêõ Fixes ($fixes_count)" >> CHANGELOG.md
          git log --pretty=format:"- %s (@%an)" --grep="^[Ff]ix:" "$latest_tag"..HEAD >> CHANGELOG.md
          echo "" >> CHANGELOG.md

          echo "### üìñ Documentation ($docs_count)" >> CHANGELOG.md
          git log --pretty=format:"- %s (@%an)" --grep="^[Dd]ocs:" "$latest_tag"..HEAD >> CHANGELOG.md
          echo "" >> CHANGELOG.md

          echo "### üåÄ Other Changes ($others_count)" >> CHANGELOG.md
          git log --pretty=format:"- %s (@%an)" --invert-grep --grep="^feat:" --grep="^fix:" --grep="^docs:" "$latest_tag"..HEAD >> CHANGELOG.md
          echo "" >> CHANGELOG.md

          # Agregar enlaces a los Pull Requests
          echo "### üîó Pull Requests" >> CHANGELOG.md
          git log --grep="Merge pull request" --pretty=format:"- %s" "$latest_tag"..HEAD | while read pr; do
            pr_number=$(echo "$pr" | grep -oP "#\K[0-9]+")
            pr_url="https://github.com/${GITHUB_REPOSITORY}/pull/$pr_number"
            echo "- [#${pr_number}]($pr_url) ${pr}" >> CHANGELOG.md
          done

      - name: Commit and push CHANGELOG.md
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add CHANGELOG.md
          git commit -m "docs: actualizacion CHANGELOG a la vers√≥n $NEW_TAG"
          git push

      - name: Create new tag
        run: |
          git tag $NEW_TAG
          git push origin $NEW_TAG
