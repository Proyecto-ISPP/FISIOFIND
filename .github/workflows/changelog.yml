name: Generate Changelog and Tag

on:
  push:
    branches:
      - main
      - fix/changelog.yml
jobs:
  generate-changelog:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  

      - name: Get version based on feat/fix commits
        id: get-version
        run: |
          # Obtener la √∫ltima tag sem√°ntica v√°lida
          latest_tag=$(git tag --sort=-v:refname | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' | head -n 1)

          if [[ -z "$latest_tag" ]]; then
            # Si no hay tag, usar 0.0.0
            major=0
            minor=0
            patch=0
          else
            # Separar la √∫ltima tag en major, minor y patch
            IFS='.' read -r major minor patch <<< "$latest_tag"
          fi

          # Contar feats (acumulativos)
          feature_count=$(git log --grep="^feat:" --oneline | wc -l)
          minor=$((minor + feature_count))

          # Contar commits no feat (para incrementar el patch)
          last_feat_commit=$(git log --grep="^feat:" --pretty=format:"%H" | head -n 1)
          if [[ -n "$last_feat_commit" ]]; then
            # Contar commits que no sean feat: despu√©s del √∫ltimo feat
            non_feat_commits=$(git log "${last_feat_commit}..HEAD" --invert-grep --grep="^feat:" --oneline | wc -l)
          else
            # Si no hay ning√∫n feat, contar todos los commits no feat:
            non_feat_commits=$(git log --invert-grep --grep="^feat:" --oneline | wc -l)
          fi

          patch=$((patch + non_feat_commits))

          new_tag="${major}.${minor}.${patch}"
          echo "üîñ Nueva tag a crear: $new_tag"
          echo "NEW_TAG=$new_tag" >> $GITHUB_ENV
          echo "latest_tag=$latest_tag" >> $GITHUB_ENV

      - name: Generate changelog
        id: generate-changelog
        run: |
          latest_tag=$(git tag --sort=-v:refname | head -n 1)

          echo "## üöÄ Changelog - $NEW_TAG" > CHANGELOG.md
          echo "" >> CHANGELOG.md

          # Contar commits por categor√≠a
          features_count=$(git log --grep="^[Ff]eat:" --oneline "$latest_tag"..HEAD | wc -l)
          fixes_count=$(git log --grep="^[Ff]ix:" --oneline "$latest_tag"..HEAD | wc -l)
          docs_count=$(git log --grep="^[Dd]ocs:" --oneline "$latest_tag"..HEAD | wc -l)
          others_count=$(git log --oneline "$latest_tag"..HEAD --invert-grep --grep="^[Ff]eat:" --grep="^[Ff]ix:" --grep="^[Dd]ocs:" | wc -l)

          echo "### ‚ú® Features ($features_count)" >> CHANGELOG.md
          git log --pretty=format:"- %s (@%an)" --grep="^[Ff]eat:" "$latest_tag"..HEAD >> CHANGELOG.md
          echo "" >> CHANGELOG.md

          echo "### üêõ Fixes ($fixes_count)" >> CHANGELOG.md
          git log --pretty=format:"- %s (@%an)" --grep="^[Ff]ix:" "$latest_tag"..HEAD >> CHANGELOG.md
          echo "" >> CHANGELOG.md

          echo "### üìñ Documentation ($docs_count)" >> CHANGELOG.md
          git log --pretty=format:"- %s (@%an)" --grep="^[Dd]ocs:" "$latest_tag"..HEAD >> CHANGELOG.md
          echo "" >> CHANGELOG.md

          echo "### üåÄ Other Changes ($others_count)" >> CHANGELOG.md
          git log --pretty=format:"- %s (@%an)" --invert-grep --grep="^feat:" --grep="^fix:" --grep="^docs:" "$latest_tag"..HEAD >> CHANGELOG.md
          echo "" >> CHANGELOG.md

          # Agregar enlaces a los Pull Requests
          echo "### üîó Pull Requests" >> CHANGELOG.md
          git log --grep="Merge pull request" --pretty=format:"- %s" "$latest_tag"..HEAD | while read pr; do
            pr_number=$(echo "$pr" | grep -oP "#\K[0-9]+")
            pr_url="https://github.com/${GITHUB_REPOSITORY}/pull/$pr_number"
            echo "- [#${pr_number}]($pr_url) ${pr}" >> CHANGELOG.md
          done

      - name: Commit and push CHANGELOG.md
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add CHANGELOG.md
          git commit -m "docs: actualizaci√≥n CHANGELOG para $NEW_TAG"
          git push

      - name: Create new tag
        run: |
          git tag $NEW_TAG
          git push origin $NEW_TAG
