name: Generate Changelog and Tag

on:
  push:
    branches:
      - feat/changelog.yml

jobs:
  generate-changelog:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest tag
        id: get-latest-tag
        run: |
          latest_tag=$(git tag --sort=-v:refname | head -n 1)
          echo "Última tag encontrada: $latest_tag"
          if [[ -z "$latest_tag" ]]; then
            new_tag="1.0.0"
          else
            major=$(echo "$latest_tag" | cut -d. -f1)
            new_major=$((major + 1))
            new_tag="${new_major}.0.0"
          fi
          echo "NEW_TAG=$new_tag" >> $GITHUB_ENV
          echo "Nueva tag a crear: $new_tag"
          
      - name: Debug NEW_TAG
        run: |
          echo "Verificando el valor de NEW_TAG: $NEW_TAG"
        
      - name: Generate grouped changelog
        id: generate-changelog
        run: |
          echo "## Changelog - $NEW_TAG" > CHANGELOG.md
          echo "" >> CHANGELOG.md

          # Obtener fechas únicas de los commits en orden descendente
          echo "Obteniendo las fechas de los commits desde la última tag..."
          git log --since=$(git tag --sort=-v:refname | head -n 1) --pretty=format:"%ad" --date=short | sort -ur
          
          git log --since=$(git tag --sort=-v:refname | head -n 1) --pretty=format:"%ad" --date=short | sort -ur | while read -r date; do
              echo "### $date" >> CHANGELOG.md
              
              for category in "feat" "fix" "docs"; do
                  capitalized=$(echo "$category" | sed 's/.*/\u&/')
                  echo "Buscando commits de la categoría: $capitalized"
                  
                  # Usamos una expresión regular para permitir coincidencias con mayúsculas/minúsculas
                  commits=$(git log --since=$(git tag --sort=-v:refname | head -n 1) --pretty=format:"- %s (by %an)" --grep="^${category}" --date=short | grep -i "$date")

                  if [[ -n "$commits" ]]; then
                      echo "#### ${capitalized}s" >> CHANGELOG.md
                      echo "$commits" >> CHANGELOG.md
                      echo "" >> CHANGELOG.md
                  fi
              done

              # Branch Merges
              merges=$(git log --since=$(git tag --sort=-v:refname | head -n 1) --pretty=format:"- %s (by %an)" --grep="Merge branch" --date=short | grep "$date")
              if [[ -n "$merges" ]]; then
                  echo "#### Branch Merges" >> CHANGELOG.md
                  echo "$merges" >> CHANGELOG.md
                  echo "" >> CHANGELOG.md
              fi

              # Pull Request Merges
              pr_merges=$(git log --since=$(git tag --sort=-v:refname | head -n 1) --pretty=format:"- %s (by %an)" --grep="Merge pull request" --date=short | grep "$date")
              if [[ -n "$pr_merges" ]]; then
                  echo "#### Pull Request Merges" >> CHANGELOG.md
                  echo "$pr_merges" >> CHANGELOG.md
                  echo "" >> CHANGELOG.md
              fi

          done

      - name: Commit and push CHANGELOG.md
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add CHANGELOG.md
          git commit -m "docs: actualizado CHANGELOG con los nuevos cambios para $NEW_TAG"
          git push

      - name: Create new tag
        run: |
          echo "Creando nueva tag: $NEW_TAG"
          git tag $NEW_TAG
          git push origin $NEW_TAG
